//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public HitpointsComponent hitpoints { get { return (HitpointsComponent)GetComponent(GameComponentsLookup.Hitpoints); } }
    public bool hasHitpoints { get { return HasComponent(GameComponentsLookup.Hitpoints); } }

    public void AddHitpoints(float newHp) {
        var index = GameComponentsLookup.Hitpoints;
        var component = (HitpointsComponent)CreateComponent(index, typeof(HitpointsComponent));
        component.hp = newHp;
        AddComponent(index, component);
    }

    public void ReplaceHitpoints(float newHp) {
        var index = GameComponentsLookup.Hitpoints;
        var component = (HitpointsComponent)CreateComponent(index, typeof(HitpointsComponent));
        component.hp = newHp;
        ReplaceComponent(index, component);
    }

    public void RemoveHitpoints() {
        RemoveComponent(GameComponentsLookup.Hitpoints);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherHitpoints;

    public static Entitas.IMatcher<GameEntity> Hitpoints {
        get {
            if (_matcherHitpoints == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Hitpoints);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherHitpoints = matcher;
            }

            return _matcherHitpoints;
        }
    }
}
